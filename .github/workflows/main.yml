name: Build service

on: push

jobs:
  build:
    name: Build service
    permissions: write-all
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/${{ github.repository_owner }}/map-app-search-service-rel-env
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Install git
        run: apt install -y git

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build Debug
        run: |
          echo $PWD
          ls -alh ..
          mkdir buildDbg
          cd buildDbg
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=out -DCONAN_DEPS_PATH=/workspace/search-service-dependencies-rel ..
          make install

      - name: Run unit tests
        run: |
          cd buildDbg/out/bin
          ./map_app_search_service_unit_tests --gtest_output="xml:report.xml"

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "buildDbg/out/bin/report.xml"

      - name: Run coverage
        run: |
          cd buildDbg
          make coverage

      - name: Publish coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: buildDbg/tests/unit_tests/coverage

      - name: Build Release
        run: |
          mkdir buildRel
          cd buildRel
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out -DCONAN_DEPS_PATH=/workspace/search-service-dependencies-rel ..
          make install

      - name: Publish Release
        uses: actions/upload-artifact@v3
        with:
          name: map-app-search-service-rel
          path: buildRel/out

  publish:
    name: Build Image
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build
    env:
      ECR_REPOSITORY: map-app-search-service
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: map-app-search-service-rel
          path: map-app-search-service-rel

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build and tag image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --build-arg="APP=./map-app-search-service-rel" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        if: github.ref_name == 'main'
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install kubectl
        if: ${{ vars.DEPLOY_ON_K8S }} == 'true'
        uses: azure/setup-kubectl@v2.0
        with:
          version: latest

      - name: Deploy to K8s
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        if: ${{ vars.DEPLOY_ON_K8S }} == 'true'
        run: |
          aws eks update-kubeconfig --name MapApp --region eu-central-1

          kubectl create secret generic mapbox-access --from-literal=token=${{ secrets.MAPBOX_TOKEN }}

          cat k8s_service.tmp.yml | envsubst > k8s_service.yml
          cat k8s_service.yml

          kubectl apply -f k8s_service.yml
