name: Build service

on: 
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      checkout_source:
          description: "Checkout source (branch/commit)"
          required: true
          default: "main"
          type: string
      build_debug:
            description: "Build debug"
            required: true
            default: false
            type: boolean
      run_tests:
          description: "Run tests (req. build debug)"
          required: true
          default: false
          type: boolean
      run_coverage:
          description: "Run coverage (req. build debug)"
          required: true
          default: false
          type: boolean
      build_release:
          description: "Build release"
          required: true
          default: true
          type: boolean
      build_release_image:
          description: "Build release image (req. build release)"
          required: true
          default: true
          type: boolean
      deploy_image_to_repository:
        description: "Deploy image to repository (req. build release image)"
        required: true
        default: false
        type: boolean
      deploy_image_to_cluster:
        description: "Deploy image to cluster (req. deploy/predeployed image to repository)"
        required: true
        default: false
        type: boolean


jobs:
  build:
    name: Build service
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      BASE_ENV: ghcr.io/${{ github.repository_owner }}/map-app-search-service-rel-env
      ECR_REPOSITORY: map-app-search-service

    steps:
      - name: "Set configuration environment variables"
        env:
          DEPLOY: ${{ (vars.DEPLOY_ON_K8S == 'true' && github.ref_name == 'main' ) }}
        run: |
          if [[ $GITHUB_EVENT_NAME == 'workflow_dispatch' ]]; then
            #TODO: allow only owner
            export CONFIG_CHECKOUT_SOURCE=${{ inputs.checkout_source }}
            export CONFIG_BUILD_DEBUG=${{ inputs.build_debug }}
            export CONFIG_RUN_TESTS=${{ inputs.run_tests }}
            export CONFIG_RUN_COVERAGE=${{ inputs.run_coverage }}
            export CONFIG_BUILD_RELEASE=${{ inputs.build_release }}
            export CONFIG_BUILD_RELEASE_IMAGE=${{ inputs.build_release_image }}
            export CONFIG_DEPLOY_TO_REPOSITORY=${{ inputs.deploy_image_to_repository }}
            export CONFIG_DEPLOY_TO_CLUSTER=${{ inputs.deploy_image_to_cluster }}
          else
            export CONFIG_CHECKOUT_SOURCE=$GITHUB_SHA
            export CONFIG_BUILD_DEBUG=true
            export CONFIG_RUN_TESTS=true
            export CONFIG_RUN_COVERAGE=true
            export CONFIG_BUILD_RELEASE=true
            export CONFIG_BUILD_RELEASE_IMAGE=true
            export CONFIG_DEPLOY_TO_REPOSITORY=$DEPLOY
            export CONFIG_DEPLOY_TO_CLUSTER=$DEPLOY
          fi

          echo "CONFIG_CHECKOUT_SOURCE=$CONFIG_CHECKOUT_SOURCE" >> $GITHUB_ENV
          echo "CONFIG_BUILD_DEBUG=$CONFIG_BUILD_DEBUG" >> $GITHUB_ENV
          echo "CONFIG_RUN_TESTS=$CONFIG_RUN_TESTS" >> $GITHUB_ENV
          echo "CONFIG_RUN_COVERAGE=$CONFIG_RUN_COVERAGE" >> $GITHUB_ENV
          echo "CONFIG_BUILD_RELEASE=$CONFIG_BUILD_RELEASE" >> $GITHUB_ENV
          echo "CONFIG_BUILD_RELEASE_IMAGE=$CONFIG_BUILD_RELEASE_IMAGE" >> $GITHUB_ENV
          echo "CONFIG_DEPLOY_TO_REPOSITORY=$CONFIG_DEPLOY_TO_REPOSITORY" >> $GITHUB_ENV
          echo "CONFIG_DEPLOY_TO_CLUSTER=$CONFIG_DEPLOY_TO_CLUSTER" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.BASE_ENV_TOKEN }}
          ref: ${{ env.CONFIG_CHECKOUT_SOURCE }}

      - name: Build Debug
        if: ${{ env.CONFIG_BUILD_DEBUG == 'true' }}
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target build_debug .

      - name: Run unit tests
        if: ${{ env.CONFIG_RUN_TESTS == 'true' }}
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target run_unit_tests .
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target get_unit_tests_report . -o output

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if:   ${{ env.CONFIG_RUN_TESTS == 'true' }} && ( success() || failure() )# always run even if the previous step fails
        with:
          report_paths: "output/report.xml"

      - name: Run coverage
        if: ${{ env.CONFIG_RUN_COVERAGE == 'true' }}
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target run_coverage .
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target get_coverage . -o output/coverage

      - name: Publish coverage
        if: ${{ env.CONFIG_RUN_COVERAGE == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: output/coverage

      - name: Build Release
        if: ${{ env.CONFIG_BUILD_RELEASE == 'true' }}
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target build_release .
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target get_release_build . -o output/buildRel

      - name: Publish Release
        if: ${{ env.CONFIG_BUILD_RELEASE == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: map-app-search-service-rel
          path: output/buildRel

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        if: ${{ env.CONFIG_DEPLOY_TO_REPOSITORY == 'true' || env.CONFIG_DEPLOY_TO_CLUSTER == 'true' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
        if: ${{ env.CONFIG_DEPLOY_TO_REPOSITORY == 'true' || env.CONFIG_DEPLOY_TO_CLUSTER == 'true' }}

      - name: "Set release image name"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=`git log -1 '--format=format:%H'`
          [ "$CONFIG_DEPLOY_TO_REPOSITORY" == "true" ] || [ "$CONFIG_DEPLOY_TO_CLUSTER" == "true" ] && IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" || IMAGE_NAME="dummy_image:$IMAGE_TAG"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build release image
        if: ${{ env.CONFIG_BUILD_RELEASE_IMAGE == 'true' }}
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target runner -t $IMAGE_NAME .

      - name: Push image to ECR
        if: ${{ env.CONFIG_DEPLOY_TO_REPOSITORY == 'true' }}
        run: |
          docker push $IMAGE_NAME

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        if: ${{ env.CONFIG_DEPLOY_TO_CLUSTER == 'true' }}
        with:
          version: latest

      - name: Deploy to K8s
        if: ${{ env.CONFIG_DEPLOY_TO_CLUSTER == 'true' }}
        run: |
          aws eks update-kubeconfig --name MapApp --region eu-central-1

          kubectl delete secret mapbox-access --ignore-not-found
          kubectl create secret generic mapbox-access --from-literal=token=${{ secrets.MAPBOX_TOKEN }}

          cat k8s_service.tmp.yml | envsubst > k8s_service.yml

          kubectl apply -f k8s_service.yml
