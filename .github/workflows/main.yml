name: Build service

on: push

jobs:
  build:
    name: Build service
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      BASE_ENV: ghcr.io/${{ github.repository_owner }}/map-app-search-service-rel-env
      ECR_REPOSITORY: map-app-search-service
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.BASE_ENV_TOKEN }}

      - name: Build Debug
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target build_debug .

      - name: Run unit tests
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target run_unit_tests .
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target get_unit_tests_report . -o output

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "output/report.xml"

      - name: Run coverage
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target run_coverage .
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target get_coverage . -o output/coverage

      - name: Publish coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: output/coverage

      - name: Build Release
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target build_release .
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target get_release_build . -o output/buildRel

      - name: Publish Release
        uses: actions/upload-artifact@v3
        with:
          name: map-app-search-service-rel
          path: output/buildRel

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        if: ${{ github.ref_name == 'main' && vars.DEPLOY_ON_K8S  == 'true' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
        if: ${{ github.ref_name == 'main' && vars.DEPLOY_ON_K8S  == 'true' }}

      - name: "Set extra environment variables"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DEPLOY: ${{ vars.DEPLOY_ON_K8S }}
        run: |
          [ "$GITHUB_REF_NAME" == "main" ] && [[ "$DEPLOY" == "true" ]] && IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" || IMAGE_NAME="dummy_image"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build and tag image
        run: |
          docker build --build-arg="BASE_ENV=$BASE_ENV" --target runner -t $IMAGE_NAME .

      - name: Push image to ECR
        if: ${{ github.ref_name == 'main' && vars.DEPLOY_ON_K8S  == 'true' }}
        run: |
          docker push $IMAGE_NAME

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        if: ${{ github.ref_name == 'main' && vars.DEPLOY_ON_K8S  == 'true' }}
        with:
          version: latest

      - name: Deploy to K8s
        if: ${{ github.ref_name == 'main' && vars.DEPLOY_ON_K8S  == 'true' }}
        run: |
          aws eks update-kubeconfig --name MapApp --region eu-central-1

          kubectl delete secret mapbox-access --ignore-not-found
          kubectl create secret generic mapbox-access --from-literal=token=${{ secrets.MAPBOX_TOKEN }}

          cat k8s_service.tmp.yml | envsubst > k8s_service.yml

          kubectl apply -f k8s_service.yml
